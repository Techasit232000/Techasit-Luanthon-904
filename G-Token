import hashlib
import json
import time
import getpass
import sys

# ==== Security: Password check ====
def verify_password():
    correct_password = "1600401209248"
    entered_password = getpass.getpass("Enter access password: ")
    if entered_password != correct_password:
        print("Access Denied: Invalid password.")
        sys.exit(1)
    print("Access Granted âœ…\n")

# ==== Blockchain Components ====
class Block:
    def __init__(self, index, timestamp, transactions, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_data = {
            "index": self.index,
            "timestamp": self.timestamp,
            "transactions": self.transactions,
            "previous_hash": self.previous_hash
        }
        encoded = json.dumps(block_data, sort_keys=True).encode()
        return hashlib.sha256(encoded).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, time.time(), ["Genesis G-Token Block"], "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, transactions):
        last_block = self.get_latest_block()
        new_block = Block(
            len(self.chain),
            time.time(),
            transactions,
            last_block.hash
        )
        self.chain.append(new_block)

    def is_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i - 1]
            if current.hash != current.calculate_hash():
                return False
            if current.previous_hash != previous.hash:
                return False
        return True

    def display_chain(self):
        for block in self.chain:
            print(f"Block #{block.index}")
            print(f"Timestamp: {time.ctime(block.timestamp)}")
            print(f"Transactions: {block.transactions}")
            print(f"Hash: {block.hash}")
            print(f"Previous Hash: {block.previous_hash}")
            print("-" * 40)

# ==== Main Entry Point ====
def main():
    verify_password()

    chain = Blockchain()

    # Example transactions
    chain.add_block(["Alice -> Bob: 10 GT"])
    chain.add_block(["Bob -> Charlie: 5 GT"])
    chain.add_block(["Charlie -> Dave: 2 GT"])

    chain.display_chain()
    print("Blockchain valid:", chain.is_valid())

if __name__ == "__main__":
    main()
